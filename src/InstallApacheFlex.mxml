<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->


<!--
This script should be used to create an Apache Flex SDK that has the
directory structure that an IDE expects.

The Adobe AIR SDK and the Adobe Flash Player playerglobal.swc are integrated
into the directory structure.  The paths in the framework configuration files are 
modified to reflect this.  The AIR_HOME and PLAYERGLOBAL_HOME environment 
variables are not required because the locations of these pieces are known.

Command line usage: packageApacheFlexForIDE [sdk directory]

-->

<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="800" height="600" maxWidth="800" maxHeight="550" minWidth="800" minHeight="550"
					   backgroundColor="0xDDDDDD" title="Package Apache Flex SDK for use in an IDE"
					   invoke="applicationInvoked(event)" showStatusBar="false"
					   skinClass="ws.tink.spark.skins.controls.InstallApacheFlexSkin" xmlns:skins="org.apache.flex.packageflexsdk.view.skins.*" xmlns:controls="ws.tink.spark.controls.*" xmlns:controls1="org.apache.flex.packageflexsdk.view.controls.*">
	
	<fx:Style source="assets/styles/styles.css" />
	
	<fx:Script>
		<![CDATA[	
			import flash.globalization.LocaleID;
			import flash.globalization.StringTools;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			
			import org.apache.flex.packageflexsdk.resource.ViewResourceConstants;
			import org.apache.flex.packageflexsdk.view.components.ConsoleWindow;
			import org.as3commons.zip.Zip;
			import org.as3commons.zip.ZipEvent;
			import org.as3commons.zip.ZipFile;
			
			import runtimeResources.RuntimeLocale;
			
			import spark.components.Window;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import ws.tink.spark.controls.StepItem;
			
			/**
			 * Apache Flex binary distribution
			 * 
			 * Values stored in ApacheFlexConfig.xml edit file to change
			 * 
			 */
			private var APACHE_FLEX_BIN_DISTRO_FILE:String;
			private var APACHE_FLEX_BIN_DISTRO_URL:String;
			
			/**
			 * Adobe AIR SDK
			 * 
			 * Values stored in ApacheFlexConfig.xml edit file to change
			 * 
			 */ 
			private var ADOBE_AIR_SDK_WIN_FILE:String;
			private var ADOBE_AIR_SDK_WIN_URL:String;
			private var ADOBE_AIR_SDK_MAC_FILE:String;
			private var ADOBE_AIR_SDK_MAC_URL:String;
			
			/**
			 * Adobe Flash Player
			 * 
			 * Values stored in ApacheFlexConfig.xml edit file to change
			 * 
			 */
			private var ADOBE_FB_GLOBALPLAYER_SWC_FILE:String;
			private var ADOBE_FB_GLOBALPLAYER_SWC_URL:String;
			
			private const APP_NAME:String = "InstallApacheFlex";
			private const WINDOWS_OS:String = "windows";
			private const MAC_OS:String = "mac";
			
			private var _args:Array;
			private var _flexHome:String;
			private var _flexTemp:String;
			private var _flexHomeDir:File;
			private var _flexTempDir:File;
			private var _apacheFlexSDKZipFile:File;
			private var _adobeAIRSDKZipFile:File;
			private var _fbGlobalPlayerDir:File;
			private var _fbGlobalPlayerFile:File;
			private var _os:String;
			private var _loader:URLLoader;	
			private var _process:NativeProcess;
			private var _previousDisplayedPercent:int = 0;
			private var _runtimeLocale:RuntimeLocale = new RuntimeLocale();
			private var _fileUnzipErrorFunction:Function;
			
			[Bindable] private var _constants:ViewResourceConstants;
			[Bindable] private var _installationSteps:ArrayCollection = new ArrayCollection();
			[Bindable] public var _messages:ArrayCollection = new ArrayCollection();
			
			protected function applicationInvoked(event:InvokeEvent):void
			{
				centerWindow();
				_args = event.arguments;
				_constants = ViewResourceConstants.getInstance();
				_runtimeLocale.enumerateBundles();
				_langSelect.dataProvider = _runtimeLocale.supportedLanguage;
				_langSelect.selectedIndex = 0;
				selectDefaultLanguage();
				loadXML();
			}
			
			protected function selectDefaultLanguage():void {
				var length:int = _runtimeLocale.supportedLanguage.length;
				var tool:StringTools = new StringTools(LocaleID.DEFAULT);
				var userLocale:String = tool.actualLocaleIDName.replace("-","_");
				
				for (var i:int = 0; i < length; i++)
				{
					if (_runtimeLocale.supportedLanguage[i].data == userLocale) {
						_langSelect.selectedIndex = i;
						break;
					}
				}
			}
			
			protected function centerWindow():void
			{
				this.nativeWindow.x = Screen.mainScreen.bounds.width/2 - this.nativeWindow.width/2;
				this.nativeWindow.y = Screen.mainScreen.bounds.height/2 - this.nativeWindow.height/2;
			}
			
			protected function loadXML():void
			{
				var request:URLRequest = new URLRequest(_constants.CONFIG_URL);
				
				_loader = new URLLoader();
				
				try
				{
					_loader.load(request);
				}
				catch (error:Error)
				{
					log(_constants.ERROR_CONFIG_XML_LOAD + error.errorID + " " + error.message);
				}
				
				_loader.addEventListener(IOErrorEvent.IO_ERROR, xmlError);
				_loader.addEventListener(Event.COMPLETE, xmlLoaded);
			}
			
			protected function xmlError(event:IOErrorEvent):void
			{
				log(_constants.ERROR_CONFIG_XML_LOAD + event.errorID);
			}
			
			protected function xmlLoaded(event:Event):void
			{
				setOSSpecificVariables();
				
				if (setXMLVariables())
				{
					main();
				}
			}
			
			protected function setXMLVariables():Boolean
			{
				var data:XML = XML(_loader.data);
				var version:Number = Number(data.version.toString());
				var files:XMLList = data.files.file;
				var keepGoing:Boolean = true;
				
				APACHE_FLEX_BIN_DISTRO_FILE = files.(@name == 'ApacheFlexSDK').@file.toString();
				APACHE_FLEX_BIN_DISTRO_URL = files.(@name == 'ApacheFlexSDK').@path.toString();
				if (!APACHE_FLEX_BIN_DISTRO_FILE || !APACHE_FLEX_BIN_DISTRO_URL)
				{
					log(_constants.ERROR_INVALID_SDK_URL);
					keepGoing = false;
				}
				APACHE_FLEX_BIN_DISTRO_URL += APACHE_FLEX_BIN_DISTRO_FILE;
				
				ADOBE_AIR_SDK_WIN_FILE = files.(@name == 'AdobeAIRSDKWin').@file.toString();
				ADOBE_AIR_SDK_WIN_URL = files.(@name == 'AdobeAIRSDKWin').@path.toString();
				if (_os == WINDOWS_OS && (!ADOBE_AIR_SDK_WIN_FILE || !ADOBE_AIR_SDK_WIN_URL))
				{
					log(_constants.ERROR_INVALID_AIR_SDK_URL_WINDOWS);
					keepGoing = false;
				}
				ADOBE_AIR_SDK_WIN_URL += ADOBE_AIR_SDK_WIN_FILE;
				
				ADOBE_AIR_SDK_MAC_FILE = files.(@name == 'AdobeAIRSDKMac').@file.toString();
				ADOBE_AIR_SDK_MAC_URL = files.(@name == 'AdobeAIRSDKMac').@path.toString();
				if (_os == MAC_OS && (!ADOBE_AIR_SDK_MAC_FILE || !ADOBE_AIR_SDK_MAC_URL))
				{
					log(_constants.ERROR_INVALID_AIR_SDK_URL_MAC);
					keepGoing = false;
				}
				ADOBE_AIR_SDK_MAC_URL += ADOBE_AIR_SDK_MAC_FILE;
				
				ADOBE_FB_GLOBALPLAYER_SWC_FILE =  files.(@name == 'FlashPlayer').@file.toString();
				ADOBE_FB_GLOBALPLAYER_SWC_URL = files.(@name == 'FlashPlayer').@path.toString();
				if (!ADOBE_FB_GLOBALPLAYER_SWC_FILE || !ADOBE_FB_GLOBALPLAYER_SWC_URL)
				{
					log(_constants.ERROR_INVALID_FLASH_PLAYER_SWC_URL);
					keepGoing = false;
				}
				ADOBE_FB_GLOBALPLAYER_SWC_URL += ADOBE_FB_GLOBALPLAYER_SWC_FILE;
				
				return keepGoing;
			}
			
			protected function setOSSpecificVariables():void
			{
				var operatingSystemStr:String = Capabilities.os;
				
				if (operatingSystemStr.search("Mac OS") != -1)
				{
					_os =  MAC_OS;
				}
				else if (operatingSystemStr.search("Windows") != -1)
				{
					_os = WINDOWS_OS;
				}
				else
				{
					log(_constants.ERROR_UNSUPPORTED_OPERATING_SYSTEM);
				}
			}
			
			protected function main():void
			{
				var isValidCommandLineInvocaton:Boolean = validateArguments();
				
				if (isValidCommandLineInvocaton)
				{
					log(_constants.INFO_APP_INVOKED + _flexHome);
					setCommandLineState();
					flexSDKTxtInput.text = _flexHome;
					install();
				}
				else
				{
					setGUIState();
				}
				
				initiateInstallStepsActivity();
			}
			
			protected function handleInstallBtnClick(event:MouseEvent):void
			{
				if (flexSDKTxtInput.text == "")
				{
					log(_constants.INFO_ENTER_VALID_FLEX_SDK_PATH);
				}
				else
				{
					browseBtn.enabled = false;
					installBtn.enabled = false;
					_langSelect.enabled = false;
					_flexHome = flexSDKTxtInput.text;
					resetInstallStepsActivity();
					install();
				}
			}
			
			protected function initiateInstallStepsActivity():void
			{
				_installationSteps.addItem(new StepItem(_constants.STEP_CREATE_DIRECTORIES));
				_installationSteps.addItem(new StepItem(_constants.STEP_DOWNLOAD_FLEX_SDK));
				_installationSteps.addItem(new StepItem(_constants.STEP_UNZIP_FLEX_SDK));
				_installationSteps.addItem(new StepItem(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT));
				_installationSteps.addItem(new StepItem(_constants.STEP_UNZIP_AIR_RUNTIME_KIT));
				_installationSteps.addItem(new StepItem(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC));
				_installationSteps.addItem(new StepItem(_constants.STEP_INSTALL_CONFIG_FILES));
			}
			
			protected function resetInstallStepsActivity():void
			{
				for each(var step:StepItem in _installationSteps)
				{
					step.status = StepItem.NORMAL;
				}
			}
			
			protected function install():void
			{
				createDirectories();
			}
			
			protected function setCommandLineState():void
			{
				currentState = "commandLineState";
			}
			
			protected function setGUIState():void
			{
				currentState = "guiState";
			}
			
			/**
			 * If there is no argument, this is a GUI mode invocation
			 * If there are multiple arguments, its most probably a directory path with spaces.  Concatenate all of them with spaces in between
			 */
			protected function validateArguments():Boolean
			{
				if (_args.length == 0)
				{
					log(APP_NAME +_constants.INFO_INVOKED_GUI_MODE);
					return false;
				}
				
				if (_args.length > 1)
				{
					_flexHome = _args.join(" "); 
					return true;
				}
				
				if (_args.length == 1)
				{
					_flexHome = _args[0];
					return true;
				}
				
				return false;
			}
			
			// TODO Scan for Apache SDKs installed and check if allready modified?
			protected function browseForSDK(event:MouseEvent):void
			{
				var file:File = new File(); 
				
				file.addEventListener(Event.SELECT, flexSDKDirSelected); 
				file.browseForDirectory(_constants.INFO_SELECT_DIRECTORY); 
			}
			
			protected function flexSDKDirSelected(event:Event):void
			{
				var flexPath:String =  File(event.target).nativePath;
				
				if (SDKNotPackaged(flexPath))
				{
					_flexHome = flexPath;
					flexSDKTxtInput.text = flexPath;
					installBtn.enabled = true;
					_langSelect.enabled = true;
				}
			}
			
			// Not called but may be useful to check download?
			protected function validApacheSDK(flexPath:String):Boolean
			{
				var valid:Boolean = true;
				var descriptionFile:String = flexPath + File.separator + "flex-sdk-description.xml";
				var file:File = new File(descriptionFile);
				
				// Check flex SDK diretory has flex description file
				if (!file.exists)
				{
					valid = false;
					flexSDKTxtInput.errorString = _constants.ERROR_INVALID_FLEX_SDK_DIRECTORY;
				}
				
				// TODO Check is Apache not Adobe SDK
				
				return valid;
			}
			
			protected function SDKNotPackaged(flexPath:String):Boolean
			{
				var unpackaged:Boolean = true;
				var playerFile:String = flexPath + File.separator + "frameworks" + File.separator + "libs" + File.separator
					+ "player" + File.separator + "11.1" + File.separator + "playerglobal.swc"; 
				var file:File = new File(playerFile);
				
				// check for existance of  player global
				if (file.exists)
				{
					unpackaged = false;
					flexSDKTxtInput.errorString = _constants.ERROR_INVALID_FLEX_SDK_DIRECTORY;
				}
				
				return unpackaged;
			}
			
			protected function handleFlexSDXTxtInputChange(event:TextOperationEvent):void
			{
				var tempDir:File;
				var path:String = flexSDKTxtInput.text;
				
				try
				{
					tempDir = new File(path);
					
					if (SDKNotPackaged(path))
					{
						flexSDKTxtInput.errorString = "";
						_flexHome = path;
						installBtn.enabled = true;
						_langSelect.enabled = true;
					}
					else
					{
						flexSDKTxtInput.errorString = _constants.ERROR_INVALID_FLEX_SDK_DIRECTORY;
						installBtn.enabled = false;
					}
				}
				catch (e:Error)
				{
					flexSDKTxtInput.errorString = _constants.ERROR_INVALID_FLEX_SDK_DIRECTORY;
					installBtn.enabled = false;
				}
			}
			
			protected function createDirectories():void
			{
				updateActivityStep(_constants.STEP_CREATE_DIRECTORIES, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_CREATING_FLEX_HOME);
					_flexHomeDir = createFolder(_flexHome);
					log(_constants.INFO_CREATING_TEMP_DIR);
					_flexTemp = _flexHome + File.separator + "temp";
					_flexTempDir = createFolder(_flexTemp);
					updateActivityStep(_constants.STEP_CREATE_DIRECTORIES, StepItem.COMPLETE);
					downloadApacheFlexSDK();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_CREATE_DIRECTORIES, StepItem.ERROR);
					log(_constants.ERROR_UNABLE_TO_CREATE_TEMP_DIRECTORY);
					abortInstallation();
				}
			}
			
			protected function downloadApacheFlexSDK():void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_FLEX_SDK, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_DOWNLOADING_FLEX_SDK + APACHE_FLEX_BIN_DISTRO_URL);
					_apacheFlexSDKZipFile = File.userDirectory.resolvePath(_flexTemp + File.separator + APACHE_FLEX_BIN_DISTRO_FILE); 
					copyOrDownload(APACHE_FLEX_BIN_DISTRO_URL, handleApacheFlexSDKDownload, _apacheFlexSDKZipFile, handleApacheFlexSDKDownloadError);
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_FLEX_SDK, StepItem.ERROR);
					abortInstallation();
				}
					
			}
			
			protected function handleApacheFlexSDKDownload(event:Event):void
			{
				try
				{
					var fs:FileStream = new FileStream(); 
					fs.open(_apacheFlexSDKZipFile, FileMode.WRITE); 
					fs.writeBytes(event.target.data); 
					fs.close();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_FLEX_SDK, StepItem.ERROR);
					abortInstallation();
				}
				
				updateActivityStep(_constants.STEP_DOWNLOAD_FLEX_SDK, StepItem.COMPLETE);	
				unzipApacheFlexSDK();
			}
			
			protected function handleApacheFlexSDKDownloadError(event:*=null):void{
				updateActivityStep(_constants.STEP_DOWNLOAD_FLEX_SDK, StepItem.ERROR);
				log(_constants.ERROR_UNABLE_TO_DOWNLOAD_FLEX_SDK);
				abortInstallation();
			}
			
			protected function unzipApacheFlexSDK():void
			{
				trace("unzipping flex sdk");
				updateActivityStep(_constants.STEP_UNZIP_FLEX_SDK, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_UNZIPPING + _apacheFlexSDKZipFile.nativePath);
					unzip(_apacheFlexSDKZipFile, handleApacheFlexSDKZipFileUnzipComplete, handleApacheFlexSDKZipFileUnzipError);
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_UNZIP_FLEX_SDK, StepItem.ERROR);
					abortInstallation();
				}
			}
			
			protected function handleApacheFlexSDKZipFileUnzipComplete(event:Event):void
			{
				log(_constants.INFO_FINISHED_UNZIPPING + _apacheFlexSDKZipFile.nativePath);
				updateActivityStep(_constants.STEP_UNZIP_FLEX_SDK, StepItem.COMPLETE);
				
				if (_os == WINDOWS_OS)
				{
					downloadAIRRuntimeKitForWindows();
				}
				else if (_os == MAC_OS)
				{ 
					downloadAIRRuntimeKitForMac();
				}
			}
			
			protected function handleApacheFlexSDKZipFileUnzipError(error:ErrorEvent=null):void
			{
				updateActivityStep(_constants.STEP_UNZIP_FLEX_SDK, StepItem.ERROR);
				abortInstallation();
			}
			
			protected function downloadAIRRuntimeKitForWindows():void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_DOWLOADING_AIR_RUNTIME_KIT_WINDOWS + ADOBE_AIR_SDK_WIN_URL);
					_adobeAIRSDKZipFile = File.userDirectory.resolvePath(_flexTemp + File.separator + ADOBE_AIR_SDK_WIN_FILE);
					copyOrDownload(ADOBE_AIR_SDK_WIN_URL, handleAIRSDKDownload, _adobeAIRSDKZipFile, handleAIRSDKDownloadError);
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ERROR);
					abortInstallation();
				}
			}
			
			protected function downloadAIRRuntimeKitForMac():void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_DOWLOADING_AIR_RUNTIME_KIT_MAC + ADOBE_AIR_SDK_MAC_URL);
					_adobeAIRSDKZipFile = File.userDirectory.resolvePath(_flexTemp + File.separator + ADOBE_AIR_SDK_MAC_FILE);
					copyOrDownload(ADOBE_AIR_SDK_MAC_URL, handleAIRSDKDownload, _adobeAIRSDKZipFile, handleAIRSDKDownloadError);
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ERROR);
					abortInstallation();
				}
			}
			
			protected function handleAIRSDKDownload(event:Event):void
			{
				try
				{
					var fs:FileStream = new FileStream();
					fs.open(_adobeAIRSDKZipFile, FileMode.WRITE);
					fs.writeBytes(event.target.data); 
					fs.close();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ERROR);
					abortInstallation();
				}
				
				updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.COMPLETE);
				
				unzipAdobeAIRSDK();
			}
			
			protected function handleAIRSDKDownloadError(error:*=null):void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_AIR_RUNTIME_KIT, StepItem.ERROR);
				log(_constants.ERROR_UNABLE_TO_DOWNLOAD_AIR_SDK);
				abortInstallation();
			}
			
			protected function unzipAdobeAIRSDK():void
			{
				updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.ACTIVE);
				
				try
				{
					if (_os == WINDOWS_OS)
					{
						log(_constants.INFO_UNZIPPING + _adobeAIRSDKZipFile.nativePath);
						unzip(_adobeAIRSDKZipFile, handleAdobeAIRSDKWinZipFileUnzipComplete, handleAdobeAIRSDKWinZipFileUnzipError);
						
					}
					else if (_os == MAC_OS)
					{
						if (NativeProcess.isSupported)
						{
							untar(_adobeAIRSDKZipFile, _flexHomeDir, handleAdobeAIRSDKMacUntarComplete, handleAdobeAIRSDKMacUntarError);
						}
						else
						{
							log(_constants.ERROR_NATIVE_PROCESS_NOT_SUPPORTED);
							updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.ERROR);
						}
					}
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.ERROR);
					abortInstallation();
				}
			}
			
			protected function handleAdobeAIRSDKMacUntarError(error:ProgressEvent=null):void{
				updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.ERROR);
				abortInstallation();
			}
			
			protected function handleAdobeAIRSDKMacUntarComplete(event:Event):void
			{
				updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.COMPLETE);
				log(_constants.INFO_FINISHED_UNTARING + _adobeAIRSDKZipFile.nativePath);
				downloadPlayerGlobalSWC();
			}
			
			protected function handleAdobeAIRSDKWinZipFileUnzipComplete(event:Event):void
			{
				updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.COMPLETE);
				log(_constants.INFO_FINISHED_UNZIPPING + _adobeAIRSDKZipFile.nativePath);
				downloadPlayerGlobalSWC();
			}
			
			protected function handleAdobeAIRSDKWinZipFileUnzipError(error:ErrorEvent=null):void{
				updateActivityStep(_constants.STEP_UNZIP_AIR_RUNTIME_KIT, StepItem.ERROR);
			}
			
			protected function downloadPlayerGlobalSWC():void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC, StepItem.ACTIVE);
				
				try
				{
					log(_constants.INFO_INSTALLING_PLAYERGLOBAL_SWC + ADOBE_FB_GLOBALPLAYER_SWC_URL);
					_fbGlobalPlayerDir = createFolder(_flexHome + File.separator + "frameworks" + File.separator + "libs" + File.separator + "player" + File.separator + "11.1");
					_fbGlobalPlayerFile = File.userDirectory.resolvePath(_fbGlobalPlayerDir.nativePath + File.separator + "playerglobal.swc");
					copyOrDownload(ADOBE_FB_GLOBALPLAYER_SWC_URL, handlePlayerGlobalDownload, _fbGlobalPlayerFile, handlePlayerGlobalDownloadError);
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC, StepItem.ERROR);
					abortInstallation();
				}
			}
			
			protected function handlePlayerGlobalDownload(event:Event):void
			{
				try
				{
					var playerGlobalFile:File = File.userDirectory.resolvePath(_fbGlobalPlayerDir.nativePath + File.separator + "playerglobal.swc");
					var fs:FileStream = new FileStream();
					fs.open(playerGlobalFile, FileMode.WRITE);
					fs.writeBytes(event.target.data); 
					fs.close();
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC, StepItem.ERROR);
					abortInstallation();
				}
				updateActivityStep(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC, StepItem.COMPLETE);
				copyConfigFiles();
			}
			
			protected function handlePlayerGlobalDownloadError(event:ErrorEvent=null):void
			{
				updateActivityStep(_constants.STEP_DOWNLOAD_FLASHPLAYER_SWC, StepItem.ERROR);
				log(_constants.ERROR_UNABLE_TO_DOWNLOAD_FLASH_PLAYER_SWC);
				abortInstallation();
			}
			
			protected function copyConfigFiles():void
			{
				var aborted:Boolean = false;
				
				updateActivityStep(_constants.STEP_INSTALL_CONFIG_FILES, StepItem.ACTIVE);
				
				try
				{
					//Config files
					var configFilesDir:File = File.userDirectory.resolvePath(_flexHome + File.separator + "ide" + File.separator + "flashbuilder" + File.separator + "config");
					var configFiles:Array = configFilesDir.getDirectoryListing();
					var flexHomeFrameworksDir:File = File.userDirectory.resolvePath(_flexHome + File.separator + "frameworks");
					log(_constants.INFO_INSTALLING_CONFIG_FILES);
					
					for each (var file:File in configFiles)
					{
						if (isValidConfigFile(file))
						{
							var copyToFile:File = flexHomeFrameworksDir.resolvePath(file.name);
							file.copyTo(copyToFile,true);
						}
					}
				}
				catch (e:Error)
				{
					updateActivityStep(_constants.STEP_INSTALL_CONFIG_FILES, StepItem.ERROR);
					log(_constants.ERROR_UNABLE_TO_INSTALL_CONFIG_FILES);
					abortInstallation();
					aborted = true;
				}
				
				
				if (!aborted)
				{
					updateActivityStep(_constants.STEP_INSTALL_CONFIG_FILES, StepItem.COMPLETE);
					cleanup();
				}
			}
			
			protected function cleanup(isAbort:Boolean=false):void
			{
				try
				{
					_flexTempDir.deleteDirectory(true);
				}
				catch (e:Error)
				{
					log(_constants.ERROR_UNABLE_TO_DELETE_TEMP_DIRECTORY);	
				}
				
				if (!isAbort)
				{
					log(_constants.INFO_INSTALLATION_COMPLETE);
					browseBtn.enabled = true;
				}
			}
			
			protected function abortInstallation():void{
				cleanup(true);
				log(_constants.INFO_ABORT_INSTALLATION);
			}
			
			protected function _langSelect_changeHandler(event:IndexChangeEvent):void
			{
				if (_langSelect.selectedItem["data"] == _runtimeLocale.defaultLanguage)
				{
					resourceManager.localeChain = [_runtimeLocale.defaultLanguage];
					resourceManager.update();
				}
				else
				{
					resourceManager.localeChain = [_langSelect.selectedItem["data"],_runtimeLocale.defaultLanguage];
					resourceManager.update();	
				}	
			}
			
			override protected function resourcesChanged():void
			{
				super.resourcesChanged();
				
				if (browseBtn)
				{
					browseBtn.label = _constants.BROWSE_BTN_LABEL;
				}
				if (installBtn)
				{
					installBtn.label = _constants.INSTALL_BTN_LABEL;
				}
				if (installLogBtn)
				{
					installLogBtn.label = _constants.INSTALL_LOG_BTN_LABEL;
				}
				if (closeBtn)
				{
					closeBtn.label = _constants.CLOSE_BTN_LABEL;
				}
				if (flexSDKTxtInput)
				{
					flexSDKTxtInput.prompt = _constants.SELECT_PATH_PROMPT;
				}
			}
			
			/************************ Utility methods *****************/
			
			private function createFolder(path:String):File
			{
				var dir:File = new File(path);
				
				dir.createDirectory();
				
				return dir;
			}
			
			private function copyOrDownload(url:String, handlerFunction:Function, dest:File, errorFunction:Function=null):void
			{
				if (url.search("http") == 0)
				{
					download(url, handlerFunction,errorFunction);
				}
				else
				{
					var source:File = new File(url);
					
					try
					{
						source.copyTo(dest, true);
					}
					catch (error:Error)
					{
						if (errorFunction != null)
						{
							errorFunction.call(null);
						}
						log(_constants.ERROR_UNABLE_TO_COPY_FILE + error.errorID + " " + error.message);
					}
				}
			}
			
			private function download(url:String, handlerFunction:Function, errorFunction:Function=null):void
			{
				var loader:URLLoader = new URLLoader();
				var req:URLRequest = new URLRequest(url);
				
				loader.dataFormat = URLLoaderDataFormat.BINARY; 
				loader.addEventListener(Event.COMPLETE, handlerFunction);
				loader.addEventListener(Event.COMPLETE, handleDownloadComplete);
				
				if (errorFunction != null)
				{
					loader.addEventListener(ErrorEvent.ERROR,errorFunction);
					loader.addEventListener(IOErrorEvent.IO_ERROR,errorFunction);
				}
				loader.addEventListener(ProgressEvent.PROGRESS, handleDownloadProgress);
				
				loader.load(req);
			}
			
			private function handleDownloadProgress(event:ProgressEvent):void
			{
				var bytesTotal:int = event.bytesTotal;
				var bytesLoaded:int = event.bytesLoaded;
				var percentLoaded:int = Math.round(bytesLoaded*100/bytesTotal);
				
				// show count in command line progress bar in gui
				if (currentState == "commandLineState" && percentLoaded % 10 == 0 && percentLoaded != _previousDisplayedPercent)
				{
					log(_constants.INFO_DOWNLOADED + percentLoaded + "%");
					_previousDisplayedPercent = percentLoaded;
				}
				else
				{
					progressBar.percent = percentLoaded;
				}
			}
			
			private function handleDownloadComplete(event:Event):void
			{
				_previousDisplayedPercent = 0;
			}
			
			private function unzip(fileToUnzip:File, unzipCompleteFunction:Function, unzipErrorFunction:Function=null):void
			{
				var zipFileBytes:ByteArray = new ByteArray();
				var fs:FileStream = new FileStream();
				var fzip:Zip = new Zip();
				
				fs.open(fileToUnzip, FileMode.READ);
				fs.readBytes(zipFileBytes);
				fs.close();
				
				fzip.addEventListener(ZipEvent.FILE_LOADED, onFileLoaded);
				fzip.addEventListener(Event.COMPLETE, unzipCompleteFunction);
				fzip.addEventListener(Event.COMPLETE, onUnzipComplete);
				if (unzipErrorFunction != null)
				{
					fzip.addEventListener(ErrorEvent.ERROR,unzipErrorFunction);
					_fileUnzipErrorFunction = unzipErrorFunction
				}
				fzip.loadBytes(zipFileBytes);
			}

			private function onFileLoaded(e:ZipEvent):void
			{
				try
				{
					var fzf:ZipFile = e.file;
					var f:File = _flexHomeDir.resolvePath(fzf.filename);
					var fs:FileStream = new FileStream();
					
					if (fzf.sizeUncompressed == 0 && fzf.sizeCompressed == 0)
					{
						// Is a directory, not a file. Dont try to write anything into it.    
						return;
					}
					
					fs.open(f, FileMode.WRITE);
					fs.writeBytes(fzf.content);
					fs.close();
					
				}
				catch (e:Error)
				{
					_fileUnzipErrorFunction.call();
				}
			}
			
			private function onUnzipComplete(event:Event):void
			{
				var fzip:Zip = event.target as Zip;
				
				fzip.removeEventListener(ZipEvent.FILE_LOADED, onFileLoaded);
				fzip.removeEventListener(Event.COMPLETE, onUnzipComplete);
			}
			
			private function untar(source:File,destination:File,unTarCompleteFunction:Function,unTarErrorFunction:Function):void
			{
				var tar:File = new File("/usr/bin/tar");
				var startupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
				var arguments:Vector.<String> = new Vector.<String>();
				
				arguments.push("xf");
				arguments.push(source.nativePath);
				arguments.push("-C");
				arguments.push(destination.nativePath);
				
				startupInfo.executable = tar;
				startupInfo.arguments = arguments;
				
				_process = new NativeProcess();
				_process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, unTarFileProgress);
				_process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, unTarErrorFunction);
				_process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, unTarError);
				_process.addEventListener(NativeProcessExitEvent.EXIT, unTarCompleteFunction);
				_process.addEventListener(NativeProcessExitEvent.EXIT, unTarComplete);
				_process.start(startupInfo);
			}
			
			protected function unTarError(event:Event):void
			{
				var output:String = _process.standardError.readUTFBytes(_process.standardError.bytesAvailable);
				
				log(_constants.ERROR_NATIVE_PROCESS_ERROR);
				log(output);
			}
			
			protected function unTarFileProgress(event:Event):void
			{
				var output:String = _process.standardOutput.readUTFBytes(_process.standardOutput.bytesAvailable);
				
				log(output);
			}
			
			protected function unTarComplete(event:NativeProcessExitEvent):void
			{
				_process.closeInput();
				_process.exit(true);
			}

			
			private function isValidConfigFile(file:File):Boolean
			{
				var name:String = file.name;
				
				if (name.search("-config.xml") == -1)
				{
					return false;
				}
				else
				{
					return true;
				}
			}
			
			private function log(text:String):void
			{
				_messages.addItem(text);
			}
			
			private function showConsole(event:Event):void 
			{
				var console:ConsoleWindow = new ConsoleWindow();
				
				console.messages = _messages;
				console.open();
				console.nativeWindow.x = this.nativeWindow.x + this.nativeWindow.width/2 - console.nativeWindow.width/2;
				console.nativeWindow.y = this.nativeWindow.y + this.nativeWindow.height/2 - console.nativeWindow.height/2;
			}
			
			private function closeApplication(event:Event):void 
			{
				// TODO only enable close button when finished or when an error occurs
				// TODO anything we need to clean up?
				close();
			}
			
			protected function clickLogo(event:MouseEvent):void
			{
				var url:String = _constants.APACHE_FLEX_URL; 
				var urlReq:URLRequest = new URLRequest(url); 
				
				navigateToURL(urlReq);
			}
			
			protected function getStepItemFromStepLabel(stepLabel:String):StepItem{
				for each(var s:StepItem in _installationSteps)
				{
					if (s.label == stepLabel)
					{
						return s;
					}
				}
				return null;
			}
			
			protected function updateActivityStep(stepLabel:String,status:String):void
			{
				var step:StepItem = StepItem(getStepItemFromStepLabel(stepLabel));
				
				if (step != null)
				{
					step.status = status;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="guiState" id="guiState" />
		<s:State name="commandLineState" id="commandLineState" />
	</s:states>
	
	<s:layout>
		<s:VerticalLayout gap="10" horizontalAlign="center" paddingTop="0" paddingBottom="20" />
	</s:layout>
	
	<s:HGroup width="100%" paddingLeft="20" paddingRight="20" paddingTop="5">
		<s:Spacer width="100%" />
		<s:Label id="langLabel" width="80%" horizontalCenter="0" text="Select Language"
					height.guiState="100%" horizontalCenter.guiState="0" textAlign.guiState="right"
					text.guiState="Current Language" verticalAlign.guiState="middle"/>
		<s:ComboBox id="_langSelect" includeIn="guiState" width="184"
							change="_langSelect_changeHandler(event)"/>
	</s:HGroup>
	
	<s:HGroup width="80%" enabled="false" enabled.guiState="true" paddingTop="300">
		<s:TextInput id="flexSDKTxtInput" width="100%" prompt="{_constants.SELECT_PATH_PROMPT}"
					 change="handleFlexSDXTxtInputChange(event)"/>
		<s:Button id="browseBtn" styleName="browseBtnStyle" width="88" height="32"
				  label="{_constants.BROWSE_BTN_LABEL}" click="browseForSDK(event)" toolTip="{_constants.INFO_SELECT_DIRECTORY}" />
		<s:Button id="installBtn" styleName="installBtnStyle" width="88" height="32"
				  label="{_constants.INSTALL_BTN_LABEL}" enabled="false" click="handleInstallBtnClick(event)" />
	</s:HGroup>
	
	<controls1:MultiStepProgressIndicator steps="{_installationSteps}" />
	<s:Label id="lastMessage" text="{_messages.getItemAt(_messages.length-1)}" width="80%" horizontalCenter="0" />
	
	<controls:ProgressBar id="progressBar" width="60%" height="21" />
	<s:Spacer height="100%" />
	
	<s:HGroup width="100%" paddingLeft="20" paddingRight="20" paddingTop="0">
		<s:Button id="installLogBtn" styleName="genericBtnStyle" width="110" height="32"
				  label="{_constants.INSTALL_LOG_BTN_LABEL}" click="showConsole(event)" />
		<s:Spacer width="100%" />
		<s:Button id="closeBtn" styleName="genericBtnStyle" width="88" height="32" 
				  label="{_constants.CLOSE_BTN_LABEL}" click="closeApplication(event)" />
	</s:HGroup>
</s:WindowedApplication>